---
title: "Daily Mix 5"
subtitle: "Made for Lucas Okwudishiu"
format: dashboard
logo: "images/logo.png"
orientation: columns

---

## Column {width=50%}

<!-- Placeholder text for column 1 -->

```{r, load_packages}
#| echo: false
#| include: false
library(tidyverse)
library(httr2)
library(gt)


```


```{r, create_token_session}
#| echo: false
#| include: false

# Define Spotify client ID and client secret
client_id <- Sys.getenv("SPOTIFY_CLIENT_ID")
client_secret <- Sys.getenv("SPOTIFY_CLIENT_SECRET")

# Generate Spotify access token
req_access_token <- request("https://accounts.spotify.com/api/token") |> 
  req_method("POST") |> 
  req_body_raw(paste0(
    "grant_type=client_credentials&client_id=",
    client_id,
    "&client_secret=",
    client_secret
  ), "application/x-www-form-urlencoded") |> 
  req_perform() |> 
  resp_body_json()

spotify_access_token <- req_access_token$access_token

```


```{r, edm_punk_mix}
#| echo: false
#| include: false
#playlist_id <- "37i9dQZF1E356z5s0S0LAr?si=23953eea287141a3"

edm_punk_mix <- request("https://api.spotify.com/v1/playlists/5kcnyxITvHM8uhkKCEJq1f") |> 
  req_method("GET") |> 
  req_headers(
    Authorization = paste0("Bearer ", spotify_access_token),
  ) |> 
  req_perform() |> 
  resp_body_json()

# Create data frame with daily mix 5 information
song_name <- lapply(edm_punk_mix$tracks$items, FUN = function(x) {x$track$name}) %>% unlist()
song_id <- lapply(edm_punk_mix$tracks$items, FUN = function(x) {x$track$id}) %>% unlist()
artist_name <- lapply(edm_punk_mix$tracks$items, FUN = function(x) {x$track$artists[[1]]$name}) %>% unlist()
album_art <- lapply(edm_punk_mix$tracks$items, FUN = function(x) {x$track$album$images[[3]]$url}) %>% unlist()
song_duration <- lapply(edm_punk_mix$tracks$items, FUN = function(x) {x$track$duration_ms}) %>% unlist()
popularity <- lapply(edm_punk_mix$tracks$items, FUN = function(x) {x$track$popularity}) %>% unlist()

edm_punk_mix_tbl <- data.frame(
  song_name, song_id, artist_name, album_art, song_duration, popularity
  ) %>% 
  as_tibble()

```


```{r, tempo_extraction}
# Curl
# curl_translate(
#     "curl --request GET \
#   --url https://api.spotify.com/v1/audio-analysis/11dFghVXANMlKmJXsNCbNl \
#   --header 'Authorization: Bearer 1POdFZRZbvb...qqillRxMr2z'"
# )

# Curl Translate
tempo_list <- vector(mode = "list", length = 50)

for (i in 1:50) {
    audio_analysis <- request(paste0("https://api.spotify.com/v1/audio-analysis/", edm_punk_mix_tbl$song_id[i])) |> 
      req_method("GET") |> 
      req_headers(
        Authorization = paste0("Bearer ", spotify_access_token),
      ) |> 
      req_perform() |> 
      resp_body_json()
    
    # Get tempo for each section of the song
    tempo_list[[i]] <- lapply(audio_analysis$sections, FUN = function(x) {x$tempo}) %>% unlist()
}

# Add tempo to daily mix 5 table
edm_punk_mix_tbl$tempo <- I(tempo_list)

```

```{r, icons_svg}
#| echo: false
#| include: false
clock_svg <- '<svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" width="15" height="15" viewBox="0,0,256,256">
<g fill="#ffffff" fill-rule="nonzero" stroke="none" stroke-width="1" stroke-linecap="butt" stroke-linejoin="miter" stroke-miterlimit="10" stroke-dasharray="" stroke-dashoffset="0" font-family="none" font-weight="none" font-size="none" text-anchor="none" style="mix-blend-mode: normal"><g transform="scale(5.12,5.12)"><path d="M25,2c-12.683,0 -23,10.317 -23,23c0,12.683 10.317,23 23,23c12.683,0 23,-10.317 23,-23c0,-12.683 -10.317,-23 -23,-23zM25,28c-0.462,0 -0.895,-0.113 -1.286,-0.3l-6.007,6.007c-0.195,0.195 -0.451,0.293 -0.707,0.293c-0.256,0 -0.512,-0.098 -0.707,-0.293c-0.391,-0.391 -0.391,-1.023 0,-1.414l6.007,-6.007c-0.187,-0.391 -0.3,-0.824 -0.3,-1.286c0,-1.304 0.837,-2.403 2,-2.816v-14.184c0,-0.553 0.447,-1 1,-1c0.553,0 1,0.447 1,1v14.184c1.163,0.413 2,1.512 2,2.816c0,1.657 -1.343,3 -3,3z"></path></g></g>
</svg>'

generate_svg_circle <- function(popularity_value) {
    
  popularity_value <- as.numeric(popularity_value)
  
  # Calculate the radius of the circle
  radius <- 10 + 15 * (popularity_value / 100)  
  
  # Interpolate the color from red (popularity = 0) to green (popularity = 100)
  circle_colour_picker <- colorRampPalette(c("#B91d1d", "#ED8E11", "#EDDE11", "#1DB954"))
  
  # There are 101 colour values since popularity ranges from 0 to 100
  color <- circle_colour_picker(101)[popularity_value + 1]
  
  # Generate the SVG code for the circle
  svg_code <- sprintf(
    '<svg height="%1$s" width="%1$s"><circle cx="%2$s" cy="%2$s" r="%2$s" stroke="none" stroke-width="0" fill="%3$s" /><text class="circle-text" x="%2$s" y="%2$s" font-size="%4$s" fill="white" text-anchor="middle" dy=".3em">%5$s</text></svg>',
    2 * radius,        # SVG width and height
    radius,            # Circle center x, y
    color,             # Fill color used also for stroke
    radius * 0.6,      # Font size based on radius
    popularity_value   # Text to display
  )
  return(svg_code)
}

popularity_footnote <- "The popularity of a track is a value between 0 and 100, with 100 being the most popular. The popularity is calculated by algorithm and is based, in the most part, on the total number of plays the track has had and how recent those plays are. Generally speaking, songs that are being played a lot now will have a higher popularity than songs that were played a lot in the past."

tempo_footnote <- "The tempo is measured in beats per minute and represents the speed at which the music is played. The visualization shows how the tempo varies across the different sections of the song. Sections with a higher tempo are generally more energetic and upbeat, while sections with a lower tempo may be more emotional or contemplative."

source_footnote <- "**Source:** [Today's Top Hits Playlist](https://open.spotify.com/playlist/37i9dQZF1E356z5s0S0LAr?si=e6ca1575032c45af), from the Spotify Web API"

```



```{r, create_gt_table}

edm_punk_mix_tbl |> 
    select(album_art, song_name, artist_name, song_duration, popularity, tempo) |>
    rename(track_duration = song_duration) |> 
    gt() |>
    cols_label(
        album_art      = md("**Song**"),
        song_name      = "",
        artist_name    = md("**Artist**"),
        track_duration = html(clock_svg),
        popularity     = md("**Popularity**")
    ) |> 
    text_transform(
        fn = function(x) {
            web_image(url = x, height = 50)
        },
        locations = cells_body(columns = album_art)
    ) |> 
    text_transform(
        fn = function(x) {
          generate_svg_circle(x)
        },
        locations = cells_body(columns = popularity)
    ) |> 
    fmt(
        columns = track_duration,
        fns = function(x) {
            minutes <- floor(x / 60000)
            seconds <- round((x %% 60000) / 1000)
            sprintf("%d:%02d", minutes, seconds)
        }
    ) |> 
    cols_nanoplot(
        columns = tempo,
        plot_type     = "line",
        new_col_name  = "tempos",
        new_col_label = md("**Tempo**"),
        options = nanoplot_options(
            data_point_fill_color   = "#1CD360",
            data_point_stroke_color = "#1CD360",
            data_area_fill_color    = "#1CD360",
            data_line_stroke_color  = "#7D3C98",
            
        )
    ) |>
    tab_options(
        table.font.color = "#FFFFFF",
        table.background.color = "#191414",
        table.font.size = px(12),
        table.border.top.color = "transparent",
        table.border.bottom.color = "transparent",
        table_body.hlines.color = "transparent",
        table_body.border.bottom.color = "transparent",
        column_labels.border.bottom.color = "transparent",
        column_labels.border.top.color = "transparent",
        footnotes.background.color = "#282828",
        source_notes.background.color = "#282828"
    ) |> 
    cols_align(
        align = "center",
        columns = c(track_duration, popularity, tempo)
    ) |> 
    cols_width(
        artist_name ~ px(150)
    ) |>
    tab_footnote(
        footnote = popularity_footnote,
        locations = cells_column_labels(columns = popularity)
    ) |> 
    tab_footnote(
        footnote = tempo_footnote,
        locations = cells_column_labels(columns = tempos)
    ) |> 
    tab_source_note(
        source_note = md(source_footnote)
     ) |> 
    opt_css(
    css = "
        table tr:nth-child(odd) {
          background-color: #282828;
        }
          
        table tr:hover {
          background-color: #383838;
        }
        
        .cell-output-display {
          overflow-x: unset !important;
        }
        
        div#custom {
          overflow-x: unset !important;
          overflow-y: unset !important;
        }
        
        #custom .gt_col_heading {
          position: sticky !important;
          top: -5px !important;
          z-index: 10 !important;
        }
        "
  )
```


## Column {width=50%}

<!-- Placeholder text for column 2 -->

### Row {height="10%"}

```{r, send_to_ojs}
#| echo: false
#| include: false

ojs_define(daily_mix_ojs = edm_punk_mix_tbl)

```

```{ojs}
//| expandable: false
// Transpose Data
daily_mix = transpose(daily_mix_ojs)

// Create Dropdown Menu
viewof songDropdown = Inputs.select(
  daily_mix.map(d => d.song_name),
  {
    label: "Choose a song",
    unique: true
  }
)
```

### Row {height="70%"}

```{ojs}
//| expandable: false
html`<iframe class="custom-iframe" style="border-radius:12px; display: flex; justify-content: center; align-items: center;" 
  src=${`https://open.spotify.com/embed/track/${daily_mix.find(song => song.song_name === songDropdown).song_id}?utm_source=generator&theme=0`} 
  width="100%" 
  height="352" 
  frameBorder="0" 
  allowfullscreen="" 
  allow="autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture" 
  loading="lazy">
</iframe>`


```


### Row {height="20%"}

:::{.card expandable="false"}
<!-- <div style="background-color: #7D3C98; color: white; border-radius: 10px; padding: 10px; text-align: center; display: flex; align-items: center; justify-content: center; height: 100%;"> -->

<!-- <span style="font-size: 1vw; width: 100%;"> -->
<!--     **Interested in creating a similar project?** This dashboard was designed by [Lucas Okwudishu](https://www.lokwudishu.com/) following a tutorial by [Melissa Van Bussel](https://www.melissavanbussel.com/). You can access the source code for this dashboard [here](https://github.com/LucasO21/spotify-dashboard). <br> Discover the original dashboard by Melissa Van Bussel [here](https://melissavanbussel.github.io/spotify-dashboard) and view her source code [here](https://github.com/melissavanbussel/spotify-dashboard). <br> Learn more about [Posit's 2024 Table Contest](https://posit.co/blog/announcing-the-2024-table-contest/). -->


<!-- </span> -->


::: {.card expandable="false"}
<div style="background-color: #7D3C98; color: white; border-radius: 10px; padding: 10px; text-align: center; display: flex; align-items: center; justify-content: center; height: 100%;">

<span style="font-size: 1vw; width: 100%;">
This dashboard was designed by <a href="https://www.lokwudishu.com/" target="_blank">Lucas Okwudishu</a> following a tutorial by <a href="https://www.melissavanbussel.com/" target="_blank">Melissa Van Bussel</a>. You can access the source code for this dashboard <a href="https://github.com/LucasO21/spotify-dashboard" target="_blank">here</a>. <br> Discover the original dashboard by Melissa Van Bussel <a href="https://melissavanbussel.github.io/spotify-dashboard" target="_blank">here</a> and view her source code <a href="https://github.com/melissavanbussel/spotify-dashboard" target="_blank">here</a>. <br> Learn more about <a href="https://posit.co/blog/announcing-the-2024-table-contest/" target="_blank">Posit's 2024 Table Contest</a>.
</span>

</div>

:::



